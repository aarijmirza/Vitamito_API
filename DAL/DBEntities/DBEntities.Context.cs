//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL.DBEntities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class db_a74425_premiumposEntities : DbContext
    {
        public db_a74425_premiumposEntities()
            : base("name=db_a74425_premiumposEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Banner> Banners { get; set; }
        public virtual DbSet<CardType> CardTypes { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Coupon> Coupons { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<CustomerAddress> CustomerAddresses { get; set; }
        public virtual DbSet<CustomerDetail> CustomerDetails { get; set; }
        public virtual DbSet<CustomerOrder> CustomerOrders { get; set; }
        public virtual DbSet<CustomerOrder1> CustomerOrders1 { get; set; }
        public virtual DbSet<CustomerWishList> CustomerWishLists { get; set; }
        public virtual DbSet<DealsCategory> DealsCategories { get; set; }
        public virtual DbSet<DealsDetail> DealsDetails { get; set; }
        public virtual DbSet<DealsHeader> DealsHeaders { get; set; }
        public virtual DbSet<Floor> Floors { get; set; }
        public virtual DbSet<Inventory> Inventories { get; set; }
        public virtual DbSet<InventoryRecieve> InventoryRecieves { get; set; }
        public virtual DbSet<InventoryRequest> InventoryRequests { get; set; }
        public virtual DbSet<IssueStock> IssueStocks { get; set; }
        public virtual DbSet<IssueStockDetail> IssueStockDetails { get; set; }
        public virtual DbSet<Item> Items { get; set; }
        public virtual DbSet<ItemImage> ItemImages { get; set; }
        public virtual DbSet<ItemModiferMapping> ItemModiferMappings { get; set; }
        public virtual DbSet<ItemVariant> ItemVariants { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<Modifier> Modifiers { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<OrderCheckout> OrderCheckouts { get; set; }
        public virtual DbSet<OrderDealDetail> OrderDealDetails { get; set; }
        public virtual DbSet<OrderDetail> OrderDetails { get; set; }
        public virtual DbSet<OrderModifierDetail> OrderModifierDetails { get; set; }
        public virtual DbSet<OrderType> OrderTypes { get; set; }
        public virtual DbSet<PackageInfo> PackageInfoes { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<PurchaseOrder> PurchaseOrders { get; set; }
        public virtual DbSet<PurchaseOrderDetail> PurchaseOrderDetails { get; set; }
        public virtual DbSet<PurchaseReturn> PurchaseReturns { get; set; }
        public virtual DbSet<ReceiptPermission> ReceiptPermissions { get; set; }
        public virtual DbSet<Reveiw> Reveiws { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<Stock> Stocks { get; set; }
        public virtual DbSet<StockStore> StockStores { get; set; }
        public virtual DbSet<Store> Stores { get; set; }
        public virtual DbSet<SubCategory> SubCategories { get; set; }
        public virtual DbSet<SubUser> SubUsers { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Table_orderCheckoutDetail> Table_orderCheckoutDetail { get; set; }
        public virtual DbSet<Table> Tables { get; set; }
        public virtual DbSet<Tax> Taxes { get; set; }
        public virtual DbSet<TaxJunction> TaxJunctions { get; set; }
        public virtual DbSet<Unit> Units { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserPaymentInfo> UserPaymentInfoes { get; set; }
        public virtual DbSet<Variant> Variants { get; set; }
    
        [DbFunction("db_a74425_premiumposEntities", "SplitString")]
        public virtual IQueryable<SplitString_Result> SplitString(string input, string character)
        {
            var inputParameter = input != null ?
                new ObjectParameter("Input", input) :
                new ObjectParameter("Input", typeof(string));
    
            var characterParameter = character != null ?
                new ObjectParameter("Character", character) :
                new ObjectParameter("Character", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SplitString_Result>("[db_a74425_premiumposEntities].[SplitString](@Input, @Character)", inputParameter, characterParameter);
        }
    
        [DbFunction("db_a74425_premiumposEntities", "SplitStringGroup")]
        public virtual IQueryable<SplitStringGroup_Result> SplitStringGroup(string groupIDS, string priortyIDS, string minutesIDS, string attemptIDS, Nullable<double> offsetval)
        {
            var groupIDSParameter = groupIDS != null ?
                new ObjectParameter("GroupIDS", groupIDS) :
                new ObjectParameter("GroupIDS", typeof(string));
    
            var priortyIDSParameter = priortyIDS != null ?
                new ObjectParameter("PriortyIDS", priortyIDS) :
                new ObjectParameter("PriortyIDS", typeof(string));
    
            var minutesIDSParameter = minutesIDS != null ?
                new ObjectParameter("MinutesIDS", minutesIDS) :
                new ObjectParameter("MinutesIDS", typeof(string));
    
            var attemptIDSParameter = attemptIDS != null ?
                new ObjectParameter("AttemptIDS", attemptIDS) :
                new ObjectParameter("AttemptIDS", typeof(string));
    
            var offsetvalParameter = offsetval.HasValue ?
                new ObjectParameter("Offsetval", offsetval) :
                new ObjectParameter("Offsetval", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SplitStringGroup_Result>("[db_a74425_premiumposEntities].[SplitStringGroup](@GroupIDS, @PriortyIDS, @MinutesIDS, @AttemptIDS, @Offsetval)", groupIDSParameter, priortyIDSParameter, minutesIDSParameter, attemptIDSParameter, offsetvalParameter);
        }
    
        public virtual ObjectResult<ABC_Result> ABC(Nullable<System.DateTime> currDate, Nullable<int> locationID)
        {
            var currDateParameter = currDate.HasValue ?
                new ObjectParameter("CurrDate", currDate) :
                new ObjectParameter("CurrDate", typeof(System.DateTime));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ABC_Result>("ABC", currDateParameter, locationIDParameter);
        }
    
        public virtual int Get_EmailConfigByName(string configName)
        {
            var configNameParameter = configName != null ?
                new ObjectParameter("ConfigName", configName) :
                new ObjectParameter("ConfigName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Get_EmailConfigByName", configNameParameter);
        }
    
        public virtual ObjectResult<string> sp_CheckCategorySubcategoryForItem(Nullable<int> locationID, Nullable<int> currentLocationID, Nullable<int> subCategoryID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var currentLocationIDParameter = currentLocationID.HasValue ?
                new ObjectParameter("CurrentLocationID", currentLocationID) :
                new ObjectParameter("CurrentLocationID", typeof(int));
    
            var subCategoryIDParameter = subCategoryID.HasValue ?
                new ObjectParameter("SubCategoryID", subCategoryID) :
                new ObjectParameter("SubCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_CheckCategorySubcategoryForItem", locationIDParameter, currentLocationIDParameter, subCategoryIDParameter);
        }
    
        public virtual int sp_CreateLocation(string name, string descripiton, string address, string contactNo, string email, Nullable<int> timeZoneID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string countryID, Nullable<int> cityID, Nullable<System.TimeSpan> open_Time, Nullable<System.TimeSpan> close_Time, Nullable<int> userID, Nullable<int> licenseID, string industryType, Nullable<bool> deliveryServices, Nullable<double> deliveryCharges, string deliveryTime, Nullable<double> minOrderAmount, string longitude, string latitude, string lastUpdatedBy, Nullable<System.DateTime> lastUpdatedDate, Nullable<int> statusID, string companyCode, Nullable<System.DateTime> createdOn, string createdBy, Nullable<bool> isDelivery, string restaurantTypes, string cuisine, string features, string imageURL)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descripitonParameter = descripiton != null ?
                new ObjectParameter("Descripiton", descripiton) :
                new ObjectParameter("Descripiton", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var timeZoneIDParameter = timeZoneID.HasValue ?
                new ObjectParameter("TimeZoneID", timeZoneID) :
                new ObjectParameter("TimeZoneID", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var countryIDParameter = countryID != null ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(string));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var open_TimeParameter = open_Time.HasValue ?
                new ObjectParameter("Open_Time", open_Time) :
                new ObjectParameter("Open_Time", typeof(System.TimeSpan));
    
            var close_TimeParameter = close_Time.HasValue ?
                new ObjectParameter("Close_Time", close_Time) :
                new ObjectParameter("Close_Time", typeof(System.TimeSpan));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var licenseIDParameter = licenseID.HasValue ?
                new ObjectParameter("LicenseID", licenseID) :
                new ObjectParameter("LicenseID", typeof(int));
    
            var industryTypeParameter = industryType != null ?
                new ObjectParameter("IndustryType", industryType) :
                new ObjectParameter("IndustryType", typeof(string));
    
            var deliveryServicesParameter = deliveryServices.HasValue ?
                new ObjectParameter("DeliveryServices", deliveryServices) :
                new ObjectParameter("DeliveryServices", typeof(bool));
    
            var deliveryChargesParameter = deliveryCharges.HasValue ?
                new ObjectParameter("DeliveryCharges", deliveryCharges) :
                new ObjectParameter("DeliveryCharges", typeof(double));
    
            var deliveryTimeParameter = deliveryTime != null ?
                new ObjectParameter("DeliveryTime", deliveryTime) :
                new ObjectParameter("DeliveryTime", typeof(string));
    
            var minOrderAmountParameter = minOrderAmount.HasValue ?
                new ObjectParameter("MinOrderAmount", minOrderAmount) :
                new ObjectParameter("MinOrderAmount", typeof(double));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(string));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(string));
    
            var lastUpdatedByParameter = lastUpdatedBy != null ?
                new ObjectParameter("LastUpdatedBy", lastUpdatedBy) :
                new ObjectParameter("LastUpdatedBy", typeof(string));
    
            var lastUpdatedDateParameter = lastUpdatedDate.HasValue ?
                new ObjectParameter("LastUpdatedDate", lastUpdatedDate) :
                new ObjectParameter("LastUpdatedDate", typeof(System.DateTime));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var isDeliveryParameter = isDelivery.HasValue ?
                new ObjectParameter("IsDelivery", isDelivery) :
                new ObjectParameter("IsDelivery", typeof(bool));
    
            var restaurantTypesParameter = restaurantTypes != null ?
                new ObjectParameter("RestaurantTypes", restaurantTypes) :
                new ObjectParameter("RestaurantTypes", typeof(string));
    
            var cuisineParameter = cuisine != null ?
                new ObjectParameter("Cuisine", cuisine) :
                new ObjectParameter("Cuisine", typeof(string));
    
            var featuresParameter = features != null ?
                new ObjectParameter("Features", features) :
                new ObjectParameter("Features", typeof(string));
    
            var imageURLParameter = imageURL != null ?
                new ObjectParameter("ImageURL", imageURL) :
                new ObjectParameter("ImageURL", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CreateLocation", nameParameter, descripitonParameter, addressParameter, contactNoParameter, emailParameter, timeZoneIDParameter, dateFromParameter, dateToParameter, countryIDParameter, cityIDParameter, open_TimeParameter, close_TimeParameter, userIDParameter, licenseIDParameter, industryTypeParameter, deliveryServicesParameter, deliveryChargesParameter, deliveryTimeParameter, minOrderAmountParameter, longitudeParameter, latitudeParameter, lastUpdatedByParameter, lastUpdatedDateParameter, statusIDParameter, companyCodeParameter, createdOnParameter, createdByParameter, isDeliveryParameter, restaurantTypesParameter, cuisineParameter, featuresParameter, imageURLParameter);
        }
    
        public virtual ObjectResult<sp_DatewiseSalesSummary_Result> sp_DatewiseSalesSummary(string orderStartDate, string orderLastDate, Nullable<int> locationId)
        {
            var orderStartDateParameter = orderStartDate != null ?
                new ObjectParameter("OrderStartDate", orderStartDate) :
                new ObjectParameter("OrderStartDate", typeof(string));
    
            var orderLastDateParameter = orderLastDate != null ?
                new ObjectParameter("OrderLastDate", orderLastDate) :
                new ObjectParameter("OrderLastDate", typeof(string));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DatewiseSalesSummary_Result>("sp_DatewiseSalesSummary", orderStartDateParameter, orderLastDateParameter, locationIdParameter);
        }
    
        public virtual ObjectResult<sp_DatewiseSalesSummaryMulitLoc_Result> sp_DatewiseSalesSummaryMulitLoc(string orderStartDate, string orderLastDate, string locationId)
        {
            var orderStartDateParameter = orderStartDate != null ?
                new ObjectParameter("OrderStartDate", orderStartDate) :
                new ObjectParameter("OrderStartDate", typeof(string));
    
            var orderLastDateParameter = orderLastDate != null ?
                new ObjectParameter("OrderLastDate", orderLastDate) :
                new ObjectParameter("OrderLastDate", typeof(string));
    
            var locationIdParameter = locationId != null ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DatewiseSalesSummaryMulitLoc_Result>("sp_DatewiseSalesSummaryMulitLoc", orderStartDateParameter, orderLastDateParameter, locationIdParameter);
        }
    
        public virtual int sp_deductinventory(Nullable<int> itemID, Nullable<double> quantity, Nullable<int> locationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(double));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_deductinventory", itemIDParameter, quantityParameter, locationIDParameter);
        }
    
        public virtual int sp_DeductStockAdmin(Nullable<int> itemID, Nullable<int> locationID, Nullable<double> quantity, Nullable<System.DateTime> lastUpdatedDate)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(double));
    
            var lastUpdatedDateParameter = lastUpdatedDate.HasValue ?
                new ObjectParameter("LastUpdatedDate", lastUpdatedDate) :
                new ObjectParameter("LastUpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeductStockAdmin", itemIDParameter, locationIDParameter, quantityParameter, lastUpdatedDateParameter);
        }
    
        public virtual int sp_Delete_InventoryandStock(Nullable<int> itemId)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Delete_InventoryandStock", itemIdParameter);
        }
    
        public virtual int sp_DeleteLocation(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteLocation", locationIDParameter);
        }
    
        public virtual int sp_DeleteUser(Nullable<int> userID, Nullable<System.DateTime> lastUpdatedDate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var lastUpdatedDateParameter = lastUpdatedDate.HasValue ?
                new ObjectParameter("LastUpdatedDate", lastUpdatedDate) :
                new ObjectParameter("LastUpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteUser", userIDParameter, lastUpdatedDateParameter);
        }
    
        public virtual ObjectResult<sp_FilterOrder_Result> sp_FilterOrder(Nullable<System.DateTime> orderStartDate, Nullable<System.DateTime> orderLastDate, Nullable<int> locationID)
        {
            var orderStartDateParameter = orderStartDate.HasValue ?
                new ObjectParameter("OrderStartDate", orderStartDate) :
                new ObjectParameter("OrderStartDate", typeof(System.DateTime));
    
            var orderLastDateParameter = orderLastDate.HasValue ?
                new ObjectParameter("OrderLastDate", orderLastDate) :
                new ObjectParameter("OrderLastDate", typeof(System.DateTime));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FilterOrder_Result>("sp_FilterOrder", orderStartDateParameter, orderLastDateParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<sp_FilterOrderTest_Result> sp_FilterOrderTest(Nullable<System.DateTime> orderStartDate, Nullable<System.DateTime> orderLastDate, Nullable<int> locationID)
        {
            var orderStartDateParameter = orderStartDate.HasValue ?
                new ObjectParameter("OrderStartDate", orderStartDate) :
                new ObjectParameter("OrderStartDate", typeof(System.DateTime));
    
            var orderLastDateParameter = orderLastDate.HasValue ?
                new ObjectParameter("OrderLastDate", orderLastDate) :
                new ObjectParameter("OrderLastDate", typeof(System.DateTime));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FilterOrderTest_Result>("sp_FilterOrderTest", orderStartDateParameter, orderLastDateParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<sp_FinishItemsList_Result> sp_FinishItemsList(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FinishItemsList_Result>("sp_FinishItemsList", locationIDParameter);
        }
    
        public virtual ObjectResult<sp_GetAllBanners_Result> sp_GetAllBanners()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllBanners_Result>("sp_GetAllBanners");
        }
    
        public virtual ObjectResult<sp_getallusers_Result> sp_getallusers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getallusers_Result>("sp_getallusers");
        }
    
        public virtual ObjectResult<sp_GetBanners_Result> sp_GetBanners()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetBanners_Result>("sp_GetBanners");
        }
    
        public virtual ObjectResult<sp_GetCategory_menu_Result> sp_GetCategory_menu(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCategory_menu_Result>("sp_GetCategory_menu", locationIDParameter);
        }
    
        public virtual ObjectResult<sp_GetCompany_Result> sp_GetCompany(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCompany_Result>("sp_GetCompany", userIdParameter);
        }
    
        public virtual ObjectResult<sp_GetCustomerOrders_api_Result> sp_GetCustomerOrders_api(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCustomerOrders_api_Result>("sp_GetCustomerOrders_api", customerIDParameter);
        }
    
        public virtual ObjectResult<sp_GetDashboardData_Result> sp_GetDashboardData(Nullable<int> locationID, string orderLastDate, string orderStartDate)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var orderLastDateParameter = orderLastDate != null ?
                new ObjectParameter("OrderLastDate", orderLastDate) :
                new ObjectParameter("OrderLastDate", typeof(string));
    
            var orderStartDateParameter = orderStartDate != null ?
                new ObjectParameter("OrderStartDate", orderStartDate) :
                new ObjectParameter("OrderStartDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDashboardData_Result>("sp_GetDashboardData", locationIDParameter, orderLastDateParameter, orderStartDateParameter);
        }
    
        public virtual ObjectResult<sp_GetDashboardDataMultiLoc_Result> sp_GetDashboardDataMultiLoc(string locations, string orderLastDate, string orderStartDate)
        {
            var locationsParameter = locations != null ?
                new ObjectParameter("Locations", locations) :
                new ObjectParameter("Locations", typeof(string));
    
            var orderLastDateParameter = orderLastDate != null ?
                new ObjectParameter("OrderLastDate", orderLastDate) :
                new ObjectParameter("OrderLastDate", typeof(string));
    
            var orderStartDateParameter = orderStartDate != null ?
                new ObjectParameter("OrderStartDate", orderStartDate) :
                new ObjectParameter("OrderStartDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDashboardDataMultiLoc_Result>("sp_GetDashboardDataMultiLoc", locationsParameter, orderLastDateParameter, orderStartDateParameter);
        }
    
        public virtual ObjectResult<sp_GetDashboardLastThreeMonthsSales_Result> sp_GetDashboardLastThreeMonthsSales(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDashboardLastThreeMonthsSales_Result>("sp_GetDashboardLastThreeMonthsSales", locationIDParameter);
        }
    
        public virtual ObjectResult<sp_GetDashboardtop5Items_Result> sp_GetDashboardtop5Items(Nullable<int> locationID, string lastDate, string startDate)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var lastDateParameter = lastDate != null ?
                new ObjectParameter("LastDate", lastDate) :
                new ObjectParameter("LastDate", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDashboardtop5Items_Result>("sp_GetDashboardtop5Items", locationIDParameter, lastDateParameter, startDateParameter);
        }
    
        public virtual ObjectResult<sp_GetDashboardTopSellingItems_Result> sp_GetDashboardTopSellingItems(Nullable<int> locationID, string lastDate, string startDate)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var lastDateParameter = lastDate != null ?
                new ObjectParameter("LastDate", lastDate) :
                new ObjectParameter("LastDate", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDashboardTopSellingItems_Result>("sp_GetDashboardTopSellingItems", locationIDParameter, lastDateParameter, startDateParameter);
        }
    
        public virtual ObjectResult<sp_GetInventoryItems_Result> sp_GetInventoryItems(Nullable<int> itemID, Nullable<int> locationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetInventoryItems_Result>("sp_GetInventoryItems", itemIDParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<sp_GetItem_menu_Result> sp_GetItem_menu(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetItem_menu_Result>("sp_GetItem_menu", locationIDParameter);
        }
    
        public virtual ObjectResult<sp_GetItemModifierMapping_menu_Result> sp_GetItemModifierMapping_menu()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetItemModifierMapping_menu_Result>("sp_GetItemModifierMapping_menu");
        }
    
        public virtual ObjectResult<sp_GetItemsList_Result> sp_GetItemsList(Nullable<int> locationID, Nullable<int> itemID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetItemsList_Result>("sp_GetItemsList", locationIDParameter, itemIDParameter);
        }
    
        public virtual ObjectResult<sp_GetItemsNotInInventory_Result> sp_GetItemsNotInInventory(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetItemsNotInInventory_Result>("sp_GetItemsNotInInventory", locationIDParameter);
        }
    
        public virtual int sp_GetLocation(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetLocation", locationIDParameter);
        }
    
        public virtual ObjectResult<sp_GetModifierAndVariant_Result> sp_GetModifierAndVariant(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetModifierAndVariant_Result>("sp_GetModifierAndVariant", userIDParameter);
        }
    
        public virtual ObjectResult<sp_GetModifiers_menu_Result> sp_GetModifiers_menu(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetModifiers_menu_Result>("sp_GetModifiers_menu", userIDParameter);
        }
    
        public virtual ObjectResult<sp_GetModifiersForItem_menu_Result> sp_GetModifiersForItem_menu(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetModifiersForItem_menu_Result>("sp_GetModifiersForItem_menu", userIDParameter);
        }
    
        public virtual ObjectResult<sp_GetReceiptInfo_Result> sp_GetReceiptInfo(Nullable<int> orderID, Nullable<int> locationID, Nullable<int> userID)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetReceiptInfo_Result>("sp_GetReceiptInfo", orderIDParameter, locationIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_GetReceiptPermissions_Result> sp_GetReceiptPermissions(Nullable<int> userID, Nullable<int> locationID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetReceiptPermissions_Result>("sp_GetReceiptPermissions", userIDParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<sp_GetStockOfMultipleItems_Result> sp_GetStockOfMultipleItems(Nullable<int> locationID, string itemIDs)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var itemIDsParameter = itemIDs != null ?
                new ObjectParameter("ItemIDs", itemIDs) :
                new ObjectParameter("ItemIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetStockOfMultipleItems_Result>("sp_GetStockOfMultipleItems", locationIDParameter, itemIDsParameter);
        }
    
        public virtual ObjectResult<sp_GetSubCategory_menu_Result> sp_GetSubCategory_menu(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSubCategory_menu_Result>("sp_GetSubCategory_menu", locationIDParameter);
        }
    
        public virtual ObjectResult<sp_GetSubCategoryID_admin_Result> sp_GetSubCategoryID_admin(Nullable<int> locationID, Nullable<int> subCategoryID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var subCategoryIDParameter = subCategoryID.HasValue ?
                new ObjectParameter("SubCategoryID", subCategoryID) :
                new ObjectParameter("SubCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSubCategoryID_admin_Result>("sp_GetSubCategoryID_admin", locationIDParameter, subCategoryIDParameter);
        }
    
        public virtual ObjectResult<sp_GetTables_Result> sp_GetTables(Nullable<int> locationID, Nullable<int> floorID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var floorIDParameter = floorID.HasValue ?
                new ObjectParameter("FloorID", floorID) :
                new ObjectParameter("FloorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTables_Result>("sp_GetTables", locationIDParameter, floorIDParameter);
        }
    
        public virtual ObjectResult<sp_GetVariants_menu_Result> sp_GetVariants_menu(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetVariants_menu_Result>("sp_GetVariants_menu", userIDParameter);
        }
    
        public virtual ObjectResult<sp_GetVariantsForItem_menu_Result> sp_GetVariantsForItem_menu(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetVariantsForItem_menu_Result>("sp_GetVariantsForItem_menu", userIDParameter);
        }
    
        public virtual ObjectResult<sp_InsertItemsMapping_Result> sp_InsertItemsMapping(Nullable<int> itemID, string iDs, string type)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var iDsParameter = iDs != null ?
                new ObjectParameter("IDs", iDs) :
                new ObjectParameter("IDs", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_InsertItemsMapping_Result>("sp_InsertItemsMapping", itemIDParameter, iDsParameter, typeParameter);
        }
    
        public virtual int sp_InsertUser(string userName, string firstName, string lastName, string imagePath, string password, string company, string businessType, string email, string contactNo, string address, Nullable<int> cityID, string countryID, string website, Nullable<bool> subscribe, Nullable<int> roleID, Nullable<int> timeZoneID, string emp_Code, string nIC, string designation, Nullable<double> basicSalary, Nullable<bool> workingStatus, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string userType, string lastUpdatedBy, Nullable<System.DateTime> lastUpdatedDate, Nullable<int> statusID, Nullable<System.DateTime> createdDate, string states, string zipcode, Nullable<System.DateTime> createdOn, string createdBy, string companyURL, string companyDescription)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var imagePathParameter = imagePath != null ?
                new ObjectParameter("ImagePath", imagePath) :
                new ObjectParameter("ImagePath", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var businessTypeParameter = businessType != null ?
                new ObjectParameter("BusinessType", businessType) :
                new ObjectParameter("BusinessType", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var countryIDParameter = countryID != null ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var subscribeParameter = subscribe.HasValue ?
                new ObjectParameter("Subscribe", subscribe) :
                new ObjectParameter("Subscribe", typeof(bool));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var timeZoneIDParameter = timeZoneID.HasValue ?
                new ObjectParameter("TimeZoneID", timeZoneID) :
                new ObjectParameter("TimeZoneID", typeof(int));
    
            var emp_CodeParameter = emp_Code != null ?
                new ObjectParameter("Emp_Code", emp_Code) :
                new ObjectParameter("Emp_Code", typeof(string));
    
            var nICParameter = nIC != null ?
                new ObjectParameter("NIC", nIC) :
                new ObjectParameter("NIC", typeof(string));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var basicSalaryParameter = basicSalary.HasValue ?
                new ObjectParameter("BasicSalary", basicSalary) :
                new ObjectParameter("BasicSalary", typeof(double));
    
            var workingStatusParameter = workingStatus.HasValue ?
                new ObjectParameter("WorkingStatus", workingStatus) :
                new ObjectParameter("WorkingStatus", typeof(bool));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var lastUpdatedByParameter = lastUpdatedBy != null ?
                new ObjectParameter("LastUpdatedBy", lastUpdatedBy) :
                new ObjectParameter("LastUpdatedBy", typeof(string));
    
            var lastUpdatedDateParameter = lastUpdatedDate.HasValue ?
                new ObjectParameter("LastUpdatedDate", lastUpdatedDate) :
                new ObjectParameter("LastUpdatedDate", typeof(System.DateTime));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var statesParameter = states != null ?
                new ObjectParameter("States", states) :
                new ObjectParameter("States", typeof(string));
    
            var zipcodeParameter = zipcode != null ?
                new ObjectParameter("Zipcode", zipcode) :
                new ObjectParameter("Zipcode", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var companyURLParameter = companyURL != null ?
                new ObjectParameter("CompanyURL", companyURL) :
                new ObjectParameter("CompanyURL", typeof(string));
    
            var companyDescriptionParameter = companyDescription != null ?
                new ObjectParameter("CompanyDescription", companyDescription) :
                new ObjectParameter("CompanyDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertUser", userNameParameter, firstNameParameter, lastNameParameter, imagePathParameter, passwordParameter, companyParameter, businessTypeParameter, emailParameter, contactNoParameter, addressParameter, cityIDParameter, countryIDParameter, websiteParameter, subscribeParameter, roleIDParameter, timeZoneIDParameter, emp_CodeParameter, nICParameter, designationParameter, basicSalaryParameter, workingStatusParameter, dateFromParameter, dateToParameter, userTypeParameter, lastUpdatedByParameter, lastUpdatedDateParameter, statusIDParameter, createdDateParameter, statesParameter, zipcodeParameter, createdOnParameter, createdByParameter, companyURLParameter, companyDescriptionParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_InsertUserPaymentInfo(string packageType, string countryCode, string productName, string companyName, Nullable<bool> accountActivated, Nullable<int> paymentStatusID, Nullable<System.DateTime> paymentCreatedDate, string userName, string firstName, string lastName, string password, string company, string email, string contactNo, Nullable<int> timeZoneID, string userType, Nullable<int> statusID, Nullable<System.DateTime> createdDate, Nullable<int> isActivate, Nullable<long> businessKey, string businessType)
        {
            var packageTypeParameter = packageType != null ?
                new ObjectParameter("PackageType", packageType) :
                new ObjectParameter("PackageType", typeof(string));
    
            var countryCodeParameter = countryCode != null ?
                new ObjectParameter("CountryCode", countryCode) :
                new ObjectParameter("CountryCode", typeof(string));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var accountActivatedParameter = accountActivated.HasValue ?
                new ObjectParameter("AccountActivated", accountActivated) :
                new ObjectParameter("AccountActivated", typeof(bool));
    
            var paymentStatusIDParameter = paymentStatusID.HasValue ?
                new ObjectParameter("PaymentStatusID", paymentStatusID) :
                new ObjectParameter("PaymentStatusID", typeof(int));
    
            var paymentCreatedDateParameter = paymentCreatedDate.HasValue ?
                new ObjectParameter("PaymentCreatedDate", paymentCreatedDate) :
                new ObjectParameter("PaymentCreatedDate", typeof(System.DateTime));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var timeZoneIDParameter = timeZoneID.HasValue ?
                new ObjectParameter("TimeZoneID", timeZoneID) :
                new ObjectParameter("TimeZoneID", typeof(int));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var isActivateParameter = isActivate.HasValue ?
                new ObjectParameter("IsActivate", isActivate) :
                new ObjectParameter("IsActivate", typeof(int));
    
            var businessKeyParameter = businessKey.HasValue ?
                new ObjectParameter("BusinessKey", businessKey) :
                new ObjectParameter("BusinessKey", typeof(long));
    
            var businessTypeParameter = businessType != null ?
                new ObjectParameter("BusinessType", businessType) :
                new ObjectParameter("BusinessType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_InsertUserPaymentInfo", packageTypeParameter, countryCodeParameter, productNameParameter, companyNameParameter, accountActivatedParameter, paymentStatusIDParameter, paymentCreatedDateParameter, userNameParameter, firstNameParameter, lastNameParameter, passwordParameter, companyParameter, emailParameter, contactNoParameter, timeZoneIDParameter, userTypeParameter, statusIDParameter, createdDateParameter, isActivateParameter, businessKeyParameter, businessTypeParameter);
        }
    
        public virtual int sp_IssueStockAdmin(Nullable<int> itemID, Nullable<int> locationID, Nullable<double> quantity, Nullable<System.DateTime> lastUpdatedDate)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(double));
    
            var lastUpdatedDateParameter = lastUpdatedDate.HasValue ?
                new ObjectParameter("LastUpdatedDate", lastUpdatedDate) :
                new ObjectParameter("LastUpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_IssueStockAdmin", itemIDParameter, locationIDParameter, quantityParameter, lastUpdatedDateParameter);
        }
    
        public virtual ObjectResult<sp_Last7DaysSales_Result> sp_Last7DaysSales(Nullable<System.DateTime> currDate, Nullable<int> locationID)
        {
            var currDateParameter = currDate.HasValue ?
                new ObjectParameter("CurrDate", currDate) :
                new ObjectParameter("CurrDate", typeof(System.DateTime));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Last7DaysSales_Result>("sp_Last7DaysSales", currDateParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<sp_Login_Result> sp_Login(string id, string pass)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("pass", pass) :
                new ObjectParameter("pass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Login_Result>("sp_Login", idParameter, passParameter);
        }
    
        public virtual ObjectResult<sp_Login_SubUser_Result> sp_Login_SubUser(string id, string pass)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("pass", pass) :
                new ObjectParameter("pass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Login_SubUser_Result>("sp_Login_SubUser", idParameter, passParameter);
        }
    
        public virtual ObjectResult<sp_OrderReportDetail_Result> sp_OrderReportDetail(Nullable<int> orderID)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_OrderReportDetail_Result>("sp_OrderReportDetail", orderIDParameter);
        }
    
        public virtual ObjectResult<sp_OrderReportHeader_Result> sp_OrderReportHeader(string orderStartDate, string orderLastDate, Nullable<int> locationId)
        {
            var orderStartDateParameter = orderStartDate != null ?
                new ObjectParameter("OrderStartDate", orderStartDate) :
                new ObjectParameter("OrderStartDate", typeof(string));
    
            var orderLastDateParameter = orderLastDate != null ?
                new ObjectParameter("OrderLastDate", orderLastDate) :
                new ObjectParameter("OrderLastDate", typeof(string));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_OrderReportHeader_Result>("sp_OrderReportHeader", orderStartDateParameter, orderLastDateParameter, locationIdParameter);
        }
    
        public virtual ObjectResult<sp_OrderReportHeaderMultiLoc_Result> sp_OrderReportHeaderMultiLoc(string orderStartDate, string orderLastDate, string locationId)
        {
            var orderStartDateParameter = orderStartDate != null ?
                new ObjectParameter("OrderStartDate", orderStartDate) :
                new ObjectParameter("OrderStartDate", typeof(string));
    
            var orderLastDateParameter = orderLastDate != null ?
                new ObjectParameter("OrderLastDate", orderLastDate) :
                new ObjectParameter("OrderLastDate", typeof(string));
    
            var locationIdParameter = locationId != null ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_OrderReportHeaderMultiLoc_Result>("sp_OrderReportHeaderMultiLoc", orderStartDateParameter, orderLastDateParameter, locationIdParameter);
        }
    
        public virtual ObjectResult<sp_PRoductSummary_Result> sp_PRoductSummary(Nullable<int> locationID, string orderLastDate, string orderStartDate)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var orderLastDateParameter = orderLastDate != null ?
                new ObjectParameter("OrderLastDate", orderLastDate) :
                new ObjectParameter("OrderLastDate", typeof(string));
    
            var orderStartDateParameter = orderStartDate != null ?
                new ObjectParameter("OrderStartDate", orderStartDate) :
                new ObjectParameter("OrderStartDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PRoductSummary_Result>("sp_PRoductSummary", locationIDParameter, orderLastDateParameter, orderStartDateParameter);
        }
    
        public virtual ObjectResult<sp_PRoductSummaryMultiLoc_Result> sp_PRoductSummaryMultiLoc(string locationID, string orderLastDate, string orderStartDate)
        {
            var locationIDParameter = locationID != null ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(string));
    
            var orderLastDateParameter = orderLastDate != null ?
                new ObjectParameter("OrderLastDate", orderLastDate) :
                new ObjectParameter("OrderLastDate", typeof(string));
    
            var orderStartDateParameter = orderStartDate != null ?
                new ObjectParameter("OrderStartDate", orderStartDate) :
                new ObjectParameter("OrderStartDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PRoductSummaryMultiLoc_Result>("sp_PRoductSummaryMultiLoc", locationIDParameter, orderLastDateParameter, orderStartDateParameter);
        }
    
        public virtual ObjectResult<sp_PurchaseOrderDetailList_Result> sp_PurchaseOrderDetailList(Nullable<int> pOID)
        {
            var pOIDParameter = pOID.HasValue ?
                new ObjectParameter("POID", pOID) :
                new ObjectParameter("POID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PurchaseOrderDetailList_Result>("sp_PurchaseOrderDetailList", pOIDParameter);
        }
    
        public virtual int sp_RemoveItemVariant(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RemoveItemVariant", idParameter);
        }
    
        public virtual ObjectResult<sp_RptCreditSales_MultiLoc_Result> sp_RptCreditSales_MultiLoc(string orderStartDate, string orderLastDate, string locationId)
        {
            var orderStartDateParameter = orderStartDate != null ?
                new ObjectParameter("OrderStartDate", orderStartDate) :
                new ObjectParameter("OrderStartDate", typeof(string));
    
            var orderLastDateParameter = orderLastDate != null ?
                new ObjectParameter("OrderLastDate", orderLastDate) :
                new ObjectParameter("OrderLastDate", typeof(string));
    
            var locationIdParameter = locationId != null ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RptCreditSales_MultiLoc_Result>("sp_RptCreditSales_MultiLoc", orderStartDateParameter, orderLastDateParameter, locationIdParameter);
        }
    
        public virtual ObjectResult<sp_SalesSummary_Result> sp_SalesSummary(Nullable<int> locationID, string orderLastDate, string orderStartDate)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var orderLastDateParameter = orderLastDate != null ?
                new ObjectParameter("OrderLastDate", orderLastDate) :
                new ObjectParameter("OrderLastDate", typeof(string));
    
            var orderStartDateParameter = orderStartDate != null ?
                new ObjectParameter("OrderStartDate", orderStartDate) :
                new ObjectParameter("OrderStartDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SalesSummary_Result>("sp_SalesSummary", locationIDParameter, orderLastDateParameter, orderStartDateParameter);
        }
    
        public virtual ObjectResult<sp_SalesSummaryMultiLoc_Result> sp_SalesSummaryMultiLoc(string locationID, string orderLastDate, string orderStartDate)
        {
            var locationIDParameter = locationID != null ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(string));
    
            var orderLastDateParameter = orderLastDate != null ?
                new ObjectParameter("OrderLastDate", orderLastDate) :
                new ObjectParameter("OrderLastDate", typeof(string));
    
            var orderStartDateParameter = orderStartDate != null ?
                new ObjectParameter("OrderStartDate", orderStartDate) :
                new ObjectParameter("OrderStartDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SalesSummaryMultiLoc_Result>("sp_SalesSummaryMultiLoc", locationIDParameter, orderLastDateParameter, orderStartDateParameter);
        }
    
        public virtual ObjectResult<sp_ShiftData_Result> sp_ShiftData(Nullable<System.DateTime> date, Nullable<int> locationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ShiftData_Result>("sp_ShiftData", dateParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<sp_SignupUserWebApi_Result> sp_SignupUserWebApi(string firstName, string lastName, string userName, string email, string password, string image, Nullable<int> roleID, string userType, string lastUpdatedBy, Nullable<System.DateTime> lastUpdatedDate, Nullable<System.DateTime> createdOn, string createdBy, Nullable<int> statusID, Nullable<int> businessKey)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var lastUpdatedByParameter = lastUpdatedBy != null ?
                new ObjectParameter("LastUpdatedBy", lastUpdatedBy) :
                new ObjectParameter("LastUpdatedBy", typeof(string));
    
            var lastUpdatedDateParameter = lastUpdatedDate.HasValue ?
                new ObjectParameter("LastUpdatedDate", lastUpdatedDate) :
                new ObjectParameter("LastUpdatedDate", typeof(System.DateTime));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var businessKeyParameter = businessKey.HasValue ?
                new ObjectParameter("BusinessKey", businessKey) :
                new ObjectParameter("BusinessKey", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SignupUserWebApi_Result>("sp_SignupUserWebApi", firstNameParameter, lastNameParameter, userNameParameter, emailParameter, passwordParameter, imageParameter, roleIDParameter, userTypeParameter, lastUpdatedByParameter, lastUpdatedDateParameter, createdOnParameter, createdByParameter, statusIDParameter, businessKeyParameter);
        }
    
        public virtual ObjectResult<sp_SignupWizard_Result> sp_SignupWizard(Nullable<int> userID, string email, string password, string subPassword, string passcode, string userName, string subEmail, string userType, string locEmail, string company, string companyCode, string locationName, string locationDescription, Nullable<int> licenseID, string lastUpdatedBy, Nullable<System.DateTime> lastUpdatedDate, Nullable<System.DateTime> createdOn, string createdBy, Nullable<int> statusID, string compcontact, Nullable<decimal> comptax, string compntn, string firstName, string lastName, string contactno, string address, string locContactno, string locAddress, string storeName)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var subPasswordParameter = subPassword != null ?
                new ObjectParameter("SubPassword", subPassword) :
                new ObjectParameter("SubPassword", typeof(string));
    
            var passcodeParameter = passcode != null ?
                new ObjectParameter("Passcode", passcode) :
                new ObjectParameter("Passcode", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var subEmailParameter = subEmail != null ?
                new ObjectParameter("SubEmail", subEmail) :
                new ObjectParameter("SubEmail", typeof(string));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var locEmailParameter = locEmail != null ?
                new ObjectParameter("LocEmail", locEmail) :
                new ObjectParameter("LocEmail", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var locationNameParameter = locationName != null ?
                new ObjectParameter("LocationName", locationName) :
                new ObjectParameter("LocationName", typeof(string));
    
            var locationDescriptionParameter = locationDescription != null ?
                new ObjectParameter("LocationDescription", locationDescription) :
                new ObjectParameter("LocationDescription", typeof(string));
    
            var licenseIDParameter = licenseID.HasValue ?
                new ObjectParameter("LicenseID", licenseID) :
                new ObjectParameter("LicenseID", typeof(int));
    
            var lastUpdatedByParameter = lastUpdatedBy != null ?
                new ObjectParameter("LastUpdatedBy", lastUpdatedBy) :
                new ObjectParameter("LastUpdatedBy", typeof(string));
    
            var lastUpdatedDateParameter = lastUpdatedDate.HasValue ?
                new ObjectParameter("LastUpdatedDate", lastUpdatedDate) :
                new ObjectParameter("LastUpdatedDate", typeof(System.DateTime));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var compcontactParameter = compcontact != null ?
                new ObjectParameter("compcontact", compcontact) :
                new ObjectParameter("compcontact", typeof(string));
    
            var comptaxParameter = comptax.HasValue ?
                new ObjectParameter("comptax", comptax) :
                new ObjectParameter("comptax", typeof(decimal));
    
            var compntnParameter = compntn != null ?
                new ObjectParameter("compntn", compntn) :
                new ObjectParameter("compntn", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var contactnoParameter = contactno != null ?
                new ObjectParameter("Contactno", contactno) :
                new ObjectParameter("Contactno", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var locContactnoParameter = locContactno != null ?
                new ObjectParameter("locContactno", locContactno) :
                new ObjectParameter("locContactno", typeof(string));
    
            var locAddressParameter = locAddress != null ?
                new ObjectParameter("locAddress", locAddress) :
                new ObjectParameter("locAddress", typeof(string));
    
            var storeNameParameter = storeName != null ?
                new ObjectParameter("StoreName", storeName) :
                new ObjectParameter("StoreName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SignupWizard_Result>("sp_SignupWizard", userIDParameter, emailParameter, passwordParameter, subPasswordParameter, passcodeParameter, userNameParameter, subEmailParameter, userTypeParameter, locEmailParameter, companyParameter, companyCodeParameter, locationNameParameter, locationDescriptionParameter, licenseIDParameter, lastUpdatedByParameter, lastUpdatedDateParameter, createdOnParameter, createdByParameter, statusIDParameter, compcontactParameter, comptaxParameter, compntnParameter, firstNameParameter, lastNameParameter, contactnoParameter, addressParameter, locContactnoParameter, locAddressParameter, storeNameParameter);
        }
    
        public virtual ObjectResult<sp_SignUser_Result> sp_SignUser(string firstName, string lastName, string userName, string email, string password, string company, string companyCode, Nullable<int> roleID, string userType, string locationName, string locationDescription, Nullable<int> licenseID, string lastUpdatedBy, Nullable<System.DateTime> lastUpdatedDate, Nullable<System.DateTime> createdOn, string createdBy, Nullable<int> statusID)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var locationNameParameter = locationName != null ?
                new ObjectParameter("LocationName", locationName) :
                new ObjectParameter("LocationName", typeof(string));
    
            var locationDescriptionParameter = locationDescription != null ?
                new ObjectParameter("LocationDescription", locationDescription) :
                new ObjectParameter("LocationDescription", typeof(string));
    
            var licenseIDParameter = licenseID.HasValue ?
                new ObjectParameter("LicenseID", licenseID) :
                new ObjectParameter("LicenseID", typeof(int));
    
            var lastUpdatedByParameter = lastUpdatedBy != null ?
                new ObjectParameter("LastUpdatedBy", lastUpdatedBy) :
                new ObjectParameter("LastUpdatedBy", typeof(string));
    
            var lastUpdatedDateParameter = lastUpdatedDate.HasValue ?
                new ObjectParameter("LastUpdatedDate", lastUpdatedDate) :
                new ObjectParameter("LastUpdatedDate", typeof(System.DateTime));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SignUser_Result>("sp_SignUser", firstNameParameter, lastNameParameter, userNameParameter, emailParameter, passwordParameter, companyParameter, companyCodeParameter, roleIDParameter, userTypeParameter, locationNameParameter, locationDescriptionParameter, licenseIDParameter, lastUpdatedByParameter, lastUpdatedDateParameter, createdOnParameter, createdByParameter, statusIDParameter);
        }
    
        public virtual ObjectResult<sp_StockInNotifcation_Result> sp_StockInNotifcation(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_StockInNotifcation_Result>("sp_StockInNotifcation", locationIDParameter);
        }
    
        public virtual ObjectResult<sp_StockNotification_Result> sp_StockNotification(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_StockNotification_Result>("sp_StockNotification", locationIDParameter);
        }
    
        public virtual ObjectResult<sp_StockReport_Result> sp_StockReport(Nullable<int> locationID, string startDate, string endDate)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_StockReport_Result>("sp_StockReport", locationIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_StockReportDetail_Result> sp_StockReportDetail(Nullable<int> locationID, Nullable<int> itemID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_StockReportDetail_Result>("sp_StockReportDetail", locationIDParameter, itemIDParameter);
        }
    
        public virtual ObjectResult<sp_StockReportMultiLoc_Result> sp_StockReportMultiLoc(string locationID, string startDate, string endDate)
        {
            var locationIDParameter = locationID != null ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_StockReportMultiLoc_Result>("sp_StockReportMultiLoc", locationIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_StockStoreReport_Result> sp_StockStoreReport(Nullable<int> locationID, string startDate, string endDate)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_StockStoreReport_Result>("sp_StockStoreReport", locationIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_StockStoreSummary_Result> sp_StockStoreSummary(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_StockStoreSummary_Result>("sp_StockStoreSummary", locationIDParameter);
        }
    
        public virtual ObjectResult<sp_StockStoreSummaryMultiLoc_Result> sp_StockStoreSummaryMultiLoc(string locations)
        {
            var locationsParameter = locations != null ?
                new ObjectParameter("Locations", locations) :
                new ObjectParameter("Locations", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_StockStoreSummaryMultiLoc_Result>("sp_StockStoreSummaryMultiLoc", locationsParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> sp_UpdateInventory(Nullable<int> locationID, Nullable<int> qty, Nullable<int> iD, Nullable<int> itemID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("sp_UpdateInventory", locationIDParameter, qtyParameter, iDParameter, itemIDParameter);
        }
    
        public virtual int sp_UpdateLocation(Nullable<int> locationID, string name, string descripiton, string address, string contactNo, string email, Nullable<int> timeZoneID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string countryID, Nullable<int> cityID, Nullable<System.TimeSpan> open_Time, Nullable<System.TimeSpan> close_Time, Nullable<int> userID, Nullable<int> licenseID, string industryType, Nullable<bool> deliveryServices, Nullable<double> deliveryCharges, string deliveryTime, Nullable<double> minOrderAmount, string longitude, string latitude, string lastUpdatedBy, Nullable<System.DateTime> lastUpdatedDate, Nullable<int> statusID, string companyCode, Nullable<System.DateTime> createdOn, string createdBy, Nullable<bool> isDelivery, string restaurantTypes, string cuisine, string features, string imageURL)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descripitonParameter = descripiton != null ?
                new ObjectParameter("Descripiton", descripiton) :
                new ObjectParameter("Descripiton", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var timeZoneIDParameter = timeZoneID.HasValue ?
                new ObjectParameter("TimeZoneID", timeZoneID) :
                new ObjectParameter("TimeZoneID", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var countryIDParameter = countryID != null ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(string));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var open_TimeParameter = open_Time.HasValue ?
                new ObjectParameter("Open_Time", open_Time) :
                new ObjectParameter("Open_Time", typeof(System.TimeSpan));
    
            var close_TimeParameter = close_Time.HasValue ?
                new ObjectParameter("Close_Time", close_Time) :
                new ObjectParameter("Close_Time", typeof(System.TimeSpan));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var licenseIDParameter = licenseID.HasValue ?
                new ObjectParameter("LicenseID", licenseID) :
                new ObjectParameter("LicenseID", typeof(int));
    
            var industryTypeParameter = industryType != null ?
                new ObjectParameter("IndustryType", industryType) :
                new ObjectParameter("IndustryType", typeof(string));
    
            var deliveryServicesParameter = deliveryServices.HasValue ?
                new ObjectParameter("DeliveryServices", deliveryServices) :
                new ObjectParameter("DeliveryServices", typeof(bool));
    
            var deliveryChargesParameter = deliveryCharges.HasValue ?
                new ObjectParameter("DeliveryCharges", deliveryCharges) :
                new ObjectParameter("DeliveryCharges", typeof(double));
    
            var deliveryTimeParameter = deliveryTime != null ?
                new ObjectParameter("DeliveryTime", deliveryTime) :
                new ObjectParameter("DeliveryTime", typeof(string));
    
            var minOrderAmountParameter = minOrderAmount.HasValue ?
                new ObjectParameter("MinOrderAmount", minOrderAmount) :
                new ObjectParameter("MinOrderAmount", typeof(double));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(string));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(string));
    
            var lastUpdatedByParameter = lastUpdatedBy != null ?
                new ObjectParameter("LastUpdatedBy", lastUpdatedBy) :
                new ObjectParameter("LastUpdatedBy", typeof(string));
    
            var lastUpdatedDateParameter = lastUpdatedDate.HasValue ?
                new ObjectParameter("LastUpdatedDate", lastUpdatedDate) :
                new ObjectParameter("LastUpdatedDate", typeof(System.DateTime));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var isDeliveryParameter = isDelivery.HasValue ?
                new ObjectParameter("IsDelivery", isDelivery) :
                new ObjectParameter("IsDelivery", typeof(bool));
    
            var restaurantTypesParameter = restaurantTypes != null ?
                new ObjectParameter("RestaurantTypes", restaurantTypes) :
                new ObjectParameter("RestaurantTypes", typeof(string));
    
            var cuisineParameter = cuisine != null ?
                new ObjectParameter("Cuisine", cuisine) :
                new ObjectParameter("Cuisine", typeof(string));
    
            var featuresParameter = features != null ?
                new ObjectParameter("Features", features) :
                new ObjectParameter("Features", typeof(string));
    
            var imageURLParameter = imageURL != null ?
                new ObjectParameter("ImageURL", imageURL) :
                new ObjectParameter("ImageURL", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateLocation", locationIDParameter, nameParameter, descripitonParameter, addressParameter, contactNoParameter, emailParameter, timeZoneIDParameter, dateFromParameter, dateToParameter, countryIDParameter, cityIDParameter, open_TimeParameter, close_TimeParameter, userIDParameter, licenseIDParameter, industryTypeParameter, deliveryServicesParameter, deliveryChargesParameter, deliveryTimeParameter, minOrderAmountParameter, longitudeParameter, latitudeParameter, lastUpdatedByParameter, lastUpdatedDateParameter, statusIDParameter, companyCodeParameter, createdOnParameter, createdByParameter, isDeliveryParameter, restaurantTypesParameter, cuisineParameter, featuresParameter, imageURLParameter);
        }
    
        public virtual int sp_UpdateStockRefund(Nullable<int> itemID, Nullable<int> locationID, Nullable<double> quantity)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateStockRefund", itemIDParameter, locationIDParameter, quantityParameter);
        }
    
        public virtual int sp_UpdateUser(Nullable<int> userID, string userName, string firstName, string lastName, string imagePath, string password, string company, string businessType, string email, string contactNo, string address, Nullable<int> cityID, string countryID, string website, Nullable<bool> subscribe, Nullable<int> roleID, Nullable<int> timeZoneID, string emp_Code, string nIC, string designation, Nullable<double> basicSalary, Nullable<bool> workingStatus, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string userType, string lastUpdatedBy, Nullable<System.DateTime> lastUpdatedDate, Nullable<int> statusID, Nullable<System.DateTime> createdDate, string states, string zipcode, Nullable<System.DateTime> createdOn, string createdBy, string companyURL, string companyDescription)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var imagePathParameter = imagePath != null ?
                new ObjectParameter("ImagePath", imagePath) :
                new ObjectParameter("ImagePath", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var businessTypeParameter = businessType != null ?
                new ObjectParameter("BusinessType", businessType) :
                new ObjectParameter("BusinessType", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var countryIDParameter = countryID != null ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var subscribeParameter = subscribe.HasValue ?
                new ObjectParameter("Subscribe", subscribe) :
                new ObjectParameter("Subscribe", typeof(bool));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var timeZoneIDParameter = timeZoneID.HasValue ?
                new ObjectParameter("TimeZoneID", timeZoneID) :
                new ObjectParameter("TimeZoneID", typeof(int));
    
            var emp_CodeParameter = emp_Code != null ?
                new ObjectParameter("Emp_Code", emp_Code) :
                new ObjectParameter("Emp_Code", typeof(string));
    
            var nICParameter = nIC != null ?
                new ObjectParameter("NIC", nIC) :
                new ObjectParameter("NIC", typeof(string));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var basicSalaryParameter = basicSalary.HasValue ?
                new ObjectParameter("BasicSalary", basicSalary) :
                new ObjectParameter("BasicSalary", typeof(double));
    
            var workingStatusParameter = workingStatus.HasValue ?
                new ObjectParameter("WorkingStatus", workingStatus) :
                new ObjectParameter("WorkingStatus", typeof(bool));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var lastUpdatedByParameter = lastUpdatedBy != null ?
                new ObjectParameter("LastUpdatedBy", lastUpdatedBy) :
                new ObjectParameter("LastUpdatedBy", typeof(string));
    
            var lastUpdatedDateParameter = lastUpdatedDate.HasValue ?
                new ObjectParameter("LastUpdatedDate", lastUpdatedDate) :
                new ObjectParameter("LastUpdatedDate", typeof(System.DateTime));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var statesParameter = states != null ?
                new ObjectParameter("States", states) :
                new ObjectParameter("States", typeof(string));
    
            var zipcodeParameter = zipcode != null ?
                new ObjectParameter("Zipcode", zipcode) :
                new ObjectParameter("Zipcode", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var companyURLParameter = companyURL != null ?
                new ObjectParameter("CompanyURL", companyURL) :
                new ObjectParameter("CompanyURL", typeof(string));
    
            var companyDescriptionParameter = companyDescription != null ?
                new ObjectParameter("CompanyDescription", companyDescription) :
                new ObjectParameter("CompanyDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateUser", userIDParameter, userNameParameter, firstNameParameter, lastNameParameter, imagePathParameter, passwordParameter, companyParameter, businessTypeParameter, emailParameter, contactNoParameter, addressParameter, cityIDParameter, countryIDParameter, websiteParameter, subscribeParameter, roleIDParameter, timeZoneIDParameter, emp_CodeParameter, nICParameter, designationParameter, basicSalaryParameter, workingStatusParameter, dateFromParameter, dateToParameter, userTypeParameter, lastUpdatedByParameter, lastUpdatedDateParameter, statusIDParameter, createdDateParameter, statesParameter, zipcodeParameter, createdOnParameter, createdByParameter, companyURLParameter, companyDescriptionParameter);
        }
    
        public virtual ObjectResult<sp_UserActivateApi_Result> sp_UserActivateApi(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UserActivateApi_Result>("sp_UserActivateApi", userIDParameter);
        }
    
        public virtual int sp_UserPaymentAccountActivate(Nullable<int> userPaymentInfoID)
        {
            var userPaymentInfoIDParameter = userPaymentInfoID.HasValue ?
                new ObjectParameter("UserPaymentInfoID", userPaymentInfoID) :
                new ObjectParameter("UserPaymentInfoID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UserPaymentAccountActivate", userPaymentInfoIDParameter);
        }
    
        public virtual ObjectResult<sp_UserPaymentDetails_Result> sp_UserPaymentDetails(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UserPaymentDetails_Result>("sp_UserPaymentDetails", userIDParameter);
        }
    
        public virtual ObjectResult<sp_UserSalesMultiLoc_Result> sp_UserSalesMultiLoc(string locationID, string orderStartDate, string orderLastDate)
        {
            var locationIDParameter = locationID != null ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(string));
    
            var orderStartDateParameter = orderStartDate != null ?
                new ObjectParameter("OrderStartDate", orderStartDate) :
                new ObjectParameter("OrderStartDate", typeof(string));
    
            var orderLastDateParameter = orderLastDate != null ?
                new ObjectParameter("OrderLastDate", orderLastDate) :
                new ObjectParameter("OrderLastDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UserSalesMultiLoc_Result>("sp_UserSalesMultiLoc", locationIDParameter, orderStartDateParameter, orderLastDateParameter);
        }
    
        public virtual ObjectResult<sp_ValidateEmail_Result> sp_ValidateEmail(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ValidateEmail_Result>("sp_ValidateEmail", emailParameter);
        }
    
        public virtual ObjectResult<sp_ZXReport_Result> sp_ZXReport(Nullable<int> subUserID, Nullable<int> locationID, string orderLastDate, string orderStartDate)
        {
            var subUserIDParameter = subUserID.HasValue ?
                new ObjectParameter("SubUserID", subUserID) :
                new ObjectParameter("SubUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var orderLastDateParameter = orderLastDate != null ?
                new ObjectParameter("OrderLastDate", orderLastDate) :
                new ObjectParameter("OrderLastDate", typeof(string));
    
            var orderStartDateParameter = orderStartDate != null ?
                new ObjectParameter("OrderStartDate", orderStartDate) :
                new ObjectParameter("OrderStartDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ZXReport_Result>("sp_ZXReport", subUserIDParameter, locationIDParameter, orderLastDateParameter, orderStartDateParameter);
        }
    
        public virtual int ValidateLogin(string email, string password, Nullable<int> accounttypeid)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var accounttypeidParameter = accounttypeid.HasValue ?
                new ObjectParameter("accounttypeid", accounttypeid) :
                new ObjectParameter("accounttypeid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ValidateLogin", emailParameter, passwordParameter, accounttypeidParameter);
        }
    
        public virtual int ValidateUser(string email, string contact)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var contactParameter = contact != null ?
                new ObjectParameter("Contact", contact) :
                new ObjectParameter("Contact", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ValidateUser", emailParameter, contactParameter);
        }
    }
}
